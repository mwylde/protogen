hci_message = {
  @message_type: u8;
  public message: choose {
    HciCommand = hci_command(@message_type) |
    HciEvent = hci_event(@message_type)
  };
}

////////////////////////////
///       HCI EVENTS     ///
////////////////////////////
hci_event ($type: u8 = 0x04) = {
  @event_code: u8;
  @parameter_length: u8;
  @data: [u8; @parameter_length];
  public event: apply @data choose {
    CommandComplete = command_complete(@event_code)
  };
}

command_complete ($event_code: u8 = 0x0E) = {
  // number of hci packets which are allowed to be sent to the controller
  public @num_packets: u8;
  @opcode: u16;
  @ogf: u8 = @opcode >> 10;
  @ocf: u16 = @opcode & 0x400 - 1;
  public @response: choose {
    NoAssociatedCommand = no_associated_command(@ogf, @ocf) |
    Reset = reset_response(@ogf, @ocf) |
    SetEventFilter = set_event_filter_response(@ogf, @ocf) |
    Flush = flush_response(@ogf, @ocf) |
    WriteLocalName = write_local_name_response(@ogf, @ocf) |
    ReadLocalName = read_local_name_response(@ogf, @ocf) |
    ReadConnectionAcceptTimeout = read_connection_accept_timeout_response(@ogf, @ocf) |
    WriteConnectionAcceptTimeout = write_connection_accept_timeout_response(@ogf, @ocf) |
    ReadPageTimeout = read_page_timeout_response(@ogf, @ocf) |
    WritePageTimeout = write_page_timeout_response(@ogf, @ocf) |
    ReadScanEnable = read_scan_enable_response(@ogf, @ocf) |
    WriteScanEnable = write_scan_enable_response(@ogf, @ocf) |
    ReadPageScanActivity = read_page_scan_activity_response(@ogf, @ocf) |
    WritePageScanActivity = write_page_scan_activity_response(@ogf, @ocf) |
    ReadInquiryScanActivity = read_inquiry_scan_activity_response(@ogf, @ocf) |
    WriteInquiryScanActivity = write_inquiry_scan_activity_response(@ogf, @ocf) |
    LESetAdvertisingData = le_set_advertising_data_response(@ogf, @ocf)
  };
}

// sent to update the number of command packets that can be sent
no_associated_command ($0gf: u8, $ocf: u16 = 0x0000) = {}

response_status = {
  public status_code: u8;
}

////////////////////////////
///     HCI COMMANDS     ///
////////////////////////////

hci_command ($type: u8 = 0x01) = {
  @opcode: u16;
  @ogf: u8 = @opcode >> 10;
  @ocf: u16 = @opcode & 0x400 - 1;
  @length: u8;
  @data: [u8; @length];
  public command: apply @data choose {
    Reset = reset(@ogf, @ocf) |
    SetEventFilter = set_event_filter(@ogf, @ocf) |
    Flush = flush(@ogf, @ocf) |
    WriteLocalName = write_local_name(@ogf, @ocf) |
    ReadLocalName = read_local_name(@ogf, @ocf) |
    ReadConnectionAcceptTimeout = read_connection_accept_timeout(@ogf, @ocf) |
    WriteConnectionAcceptTimeout = write_connection_accept_timeout(@ogf, @ocf) |
    ReadPageTimeout = read_page_timeout(@ogf, @ocf) |
    WritePageTimeout = write_page_timeout(@ogf, @ocf) |
    ReadScanEnable = read_scan_enable(@ogf, @ocf) |
    WriteScanEnable = write_scan_enable(@ogf, @ocf) |
    ReadPageScanActivity = read_page_scan_activity(@ogf, @ocf) |
    WritePageScanActivity = write_page_scan_activity(@ogf, @ocf) |
    ReadInquiryScanActivity = read_inquiry_scan_activity(@ogf, @ocf) |
    WriteInquiryScanActivity = write_inquiry_scan_activity(@ogf, @ocf) |
    LESetAdvertisingData = le_set_advertising_data(@ogf, @ocf) |
    Unknown = unknown(@ogf, @ocf)
  };
}

// unknown command
unknown ($ogf: u8, $ocf: u16) = {}

// reset
reset ($ogf: u8 = 0x03, $ocf : u16 = 0x0003) = {}
reset_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0003) = {
  public status: response_status();
}

// set_event_filter
set_event_filter ($ogf: u8 = 0x03, $ocf : u16 = 0x0005) = {
  @filter_type: u8;
  public filter: choose {
    ClearAllFilter = clear_all_filter(@filter_type) |
    InquiryResult = inquiry_result(@filter_type) |
    ConnectionSetup = connection_setup(@filter_type)
  };
}
set_event_filter_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0005) = {
  public status: response_status();
}

inquiry_result ($filter_type: u8 = 0x01) = {
  public condition: filter_condition();
}

connection_setup ($filter_type: u8 = 0x02) = {
  public condition: filter_condition();
  public auto_accept: u8;
}

filter_condition = {
  @condition_type: u8;
  public value: choose {
    AllDevices = all_devices(@condition_type) |
    MatchClass = match_class(@condition_type) |
    MatchAddress = match_address(@condition_type)
  };
}

clear_all_filter($filter_type: u8 = 0x00) = {}

all_devices ($condition_type: u8 = 0x00) = {}

match_class ($condition_type: u8 = 0x01) = {
  public class_of_device: [u8; 3];
  public class_of_device_mask: [u8; 3];
}

match_address ($condition_type: u8 = 0x02) = {
  public address: [u8; 6];
}

// flush
flush ($ogf: u8 = 0x03, $ocf : u16 = 0x0008) = {
  public connection_handle: u16;
}

flush_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0008) = {
  public status: response_status();
  public connection_handle: u16;
}

// TODO: read_pin_type_command
// TODO: write_pin_type_command
// TODO: create_new_unit_key
// TODO: read_stored_link_key
// TODO: write_stored_link_key
// TODO: delete_stored_link_key

write_local_name ($ogf: u8 = 0x03, $ocf : u16 = 0x0013) = {
  @local_name_buffer: [u8; 248];
  public local_name: apply @local_name_buffer cstring;
}

write_local_name_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0013) = {
  public status: response_status();
}

read_local_name ($ogf: u8 = 0x03, $ocf : u16 = 0x0014) = {}

read_local_name_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0014) = {
  public status: response_status();
  @local_name_buffer: [u8; 248];
  public local_name: apply @local_name_buffer cstring;
}

// connection accept timeout
read_connection_accept_timeout ($ogf: u8 = 0x03, $ocf : u16 = 0x0015) = {
}

read_connection_accept_timeout_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0015) = {
  public status: response_status();
  public connection_accept_timeout: u16;
}

write_connection_accept_timeout ($ogf: u8 = 0x03, $ocf : u16 = 0x0016) = {
  public connection_accept_timeout: u16;
}

write_connection_accept_timeout_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0016) = {
  public status: response_status();
}

// page timeout
read_page_timeout ($ogf: u8 = 0x03, $ocf : u16 = 0x0017) = {
}

read_page_timeout_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0017) = {
  public status: response_status();
  public page_timeout: u16;
}

write_page_timeout ($ogf: u8 = 0x03, $ocf : u16 = 0x0018) = {
  public page_timeout: u16;
}

write_page_timeout_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0018) = {
  public status: response_status();
}


// scan enable
read_scan_enable ($ogf: u8 = 0x03, $ocf : u16 = 0x0019) = {
}

read_scan_enable_response ($ogf: u8 = 0x03, $ocf : u16 = 0x0019) = {
  public status: response_status();
  public scan_enable: u8;
}

write_scan_enable ($ogf: u8 = 0x03, $ocf : u16 = 0x001A) = {
  public scan_enable: u8;
}

write_scan_enable_response ($ogf: u8 = 0x03, $ocf : u16 = 0x001A) = {
  public status: response_status();
}


// page scan activity
read_page_scan_activity ($ogf: u8 = 0x03, $ocf : u16 = 0x001B) = {
}

read_page_scan_activity_response ($ogf: u8 = 0x03, $ocf : u16 = 0x001B) = {
  public status: response_status();
  public page_scan_interval: u16;
  public page_scan_window: u16;
}

write_page_scan_activity ($ogf: u8 = 0x03, $ocf : u16 = 0x001C) = {
  public page_scan_interval: u16;
  public page_scan_window: u16;
}

write_page_scan_activity_response ($ogf: u8 = 0x03, $ocf : u16 = 0x001C) = {
  public status: response_status();
}

// inquiry scan activity
read_inquiry_scan_activity ($ogf: u8 = 0x03, $ocf : u16 = 0x001D) = {
}

read_inquiry_scan_activity_response ($ogf: u8 = 0x03, $ocf : u16 = 0x001D) = {
  public status: response_status();
  public inquiry_scan_interval: u16;
  public inquiry_scan_window: u16;
}

write_inquiry_scan_activity ($ogf: u8 = 0x03, $ocf : u16 = 0x001E) = {
  public inquiry_scan_interval: u16;
  public inquiry_scan_window: u16;
}

write_inquiry_scan_activity_response ($ogf: u8 = 0x03, $ocf : u16 = 0x001E) = {
  public status: response_status();
}

// le set event mask
le_set_event_mask ($ogf: u8 = 0x08, $ocf: u16 = 0x0001) = {
  public le_event_mask: [u8; 8];
}

le_set_event_mask_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0001) = {
  public status: response_status();
}

// le read buffer size
le_read_buffer_size ($ogf: u8 = 0x08, $ocf: u16 = 0x0002) = {
}

le_read_buffer_size_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0002) = {
  public status: response_status();
  public hc_le_data_packet_length: u16;
  public hc_total_num_le_data_packets: u8;
}

// le_read_local_supported_features
le_read_local_supported_features ($ogf: u8 = 0x08, $ocf: u16 = 0x0003) = {
}

le_read_local_supported_features_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0003) = {
  public status: response_status();
  public le_features: [u8; 8];
}

// le_set_random_address_command
le_set_random_address_command ($ogf: u8 = 0x08, $ocf: u16 = 0x0004) = {
  public random_address: [u8; 6];
}

le_set_random_address_command_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0004) = {
  public status: response_status();
}

// le_set_advertising_parameters
le_set_advertising_parameters ($ogf: u8 = 0x08, $ocf: u16 = 0x0006) = {
  public advertising_interval_min: u16;
  public advertising_interval_max: u16;
  public advertising_type: u8;
  public own_address_type: u8;
  public peer_address_type: u8;
  public peer_address: [u8; 6];
  public advertising_channel_map: u8;
  public advertising_filter_policy: u8;
}

le_set_advertising_parameters_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0006) = {
  public status: response_status();
}

// le_set_advertising_data
le_set_advertising_data ($ogf: u8 = 0x08, $ocf: u16 = 0x0008) = {
  @advertising_data_length: u8;
  @advertising_data_buffer: [u8; @advertising_data_length];
  public advertising_data: apply @advertising_data_buffer many!(le_advertising_data());
}

le_set_advertising_data_response ($ogf: u8 = 0x08, $ocf: u16 = 0x0008) = {
  public status: response_status();
}


// advertising data
le_advertising_data() = {
  @length: u8;
  @type: u8;
  public data: choose {
    IncompleteServiceUuid16 = incomplete_service_uuid_16(@type, @length - 1) |
    CompleteServiceUuid16 = complete_service_uuid_16(@type, @length - 1) |
    IncompleteServiceUuid32 = incomplete_service_uuid_32(@type, @length - 1) |
    CompleteServiceUuid32 = complete_service_uuid_32(@type, @length - 1) |
    IncompleteServiceUuid128 = incomplete_service_uuid_128(@type, @length - 1) |
    CompleteServiceUuid128 = complete_service_uuid_128(@type, @length - 1) |
    ShortenedLocalName = shortened_local_name(@type, @length - 1) |
    CompleteLocalName = complete_local_name(@type, @length - 1) |
    ADFlags = ad_flags(@type, @length - 1) |
    ManufacturerSpecificData = manufacturer_specific_data(@type, @length - 1) |
    TxPowerLevel = tx_power_level(@type, @length - 1) |
    SlaveConnectionIntervalRange = slave_connection_interval_range(@type, @length - 1) |
    ServiceSolicitation16 = service_solicitation_16(@type, @length - 1) |
    ServiceSolicitation32 = service_solicitation_32(@type, @length - 1) |
    ServiceSolicitation128 = service_solicitation_128(@type, @length - 1) |
    ServiceData16 = service_data_16(@type, @length - 1) |
    ServiceData32 = service_solicitation_32(@type, @length - 1) |
    ServiceData128 = service_data_128(@type, @length - 1) |
    Appearance = appearance(@type, @length - 1) |
    OtherAdvertisingData = other_advertising_data(@type, @length - 1)
  };
}

//service uuids -- CSSv7 pg. 10
incomplete_service_uuid_16($type: u8 = 0x02, $len: u8) = {
  public uuids: [u16; $len / 2];
}

complete_service_uuid_16($type: u8 = 0x03, $len: u8) = {
  public uuids: [u16; $len / 2];
}

incomplete_service_uuid_32($type: u8 = 0x04, $len: u8) = {
  public uuids: [u32; $len / 4];
}

complete_service_uuid_32($type: u8 = 0x05, $len: u8) = {
  public uuids: [u32; $len / 4];
}

incomplete_service_uuid_128($type: u8 = 0x06, $len: u8) = {
  public uuids: [[u8; 16]; $len / 16];
}

complete_service_uuid_128($type: u8 = 0x07, $len: u8) = {
  public uuids: [[u8; 16]; $len / 16];
}

// local name -- CSSv7 pg. 11
shortened_local_name($type: u8 = 0x08, $len: u8) = {
  public local_name: str_utf8($len);
}

complete_local_name($type: u8 = 0x09, $len: u8) = {
  public local_name: str_utf8($len);
}

// flags -- CSSv7 pg. 12
ad_flags($type: u8 = 0x01, $len: u8) = {
  public flags: [u8; $len];
}

// manufacturer specific data -- CSSv7 pg.13
manufacturer_specific_data($type: u8 = 0xFF, $len: u8) = {
  public company_identifier_code: u16;
  public data: [u8; $len - 2];
}

// tx power level -- CSSv7 pg.13
tx_power_level($type: u8 = 0x0A, $len: u8 = 1) = {
  public level: u8;
}

// TODO: secure simple pairing out of band -- CSSv7 pg.14
// TODO: security manager out of band -- CSSv7 pg.15
// TODO: security manager tk value -- CSSv7 pg.16

// slave connection interval range -- CSSv7 pg. 16
slave_connection_interval_range($type: u8 = 0x12, $len: u8 = 4) = {
  public min: u16;
  public max: u16;
}

// service solicitation -- CSSv7 pg.17
service_solicitation_16($type: u8 = 0x14, $len: u8) = {
  public uuids: [u16; $len / 2];
}

service_solicitation_32($type: u8 = 0x1F, $len: u8) = {
  public uuids: [u32; $len / 4];
}

service_solicitation_128($type: u8 = 0x15, $len: u8) = {
  public uuids: [[u8; 16]; $len / 16];
}

// service data -- CSSv7 pg.18
service_data_16($type: u8 = 0x16, $len: u8) = {
  public uuid: u16;
  public data: [u8; $len - 2];
}

service_data_32($type: u8 = 0x20, $len: u8) = {
  public uuid: u32;
  public data: [u8; $len - 4];
}

service_data_128($type: u8 = 0x21, $len: u8) = {
  public uuid: [u8; 16];
  public data: [u8; $len - 16];
}

// appearance -- CSSv7 pg. 18
appearance($type: u8 = 0x19, $len: u8 = 2) = {
  public appearance: u16;
}

// other
other_advertising_data($type: u8, $len: u8) = {
  public data: [u8; $len];
}


//    ReadLEHostSupported = OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL as u16) << 10,
//    WriteLEHostSupported = OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL as u16) << 10,
//    ReadLocalVersion = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM as u16) << 10,
//    ReadBDAddr = OCF_READ_BD_ADDR | (OGF_INFO_PARAM as u16) << 10,
//    ReadRSSI = OCF_READ_RSSI | (OGF_STATUS_PARAM as u16) << 10,
//
//    ChangeLocalName = 0x0C13,
//    WriteExtendedInquiryResponse = 0x0C52,
//
//    LESetScanParameters = OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL as u16) << 10,
//    LESetScanEnabled = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL as u16) << 10,
//    LECreateConnection = OCF_LE_CREATE_CONN | (OGF_LE_CTL as u16) << 10,
//    LEConnectionUpdate = OCF_LE_CONN_UPDATE | (OGF_LE_CTL as u16) << 10,
//    LEStartEncryption = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL as u16) << 10,
//
//    LESetAdvertisingData = 0x2008,
//    LESetScanResponseData = 0x2009,
//    LEAddDeviceToWhiteList = 0x2011,
//    LERemoveDeviceFromWhiteList = 0x2012,
//    LEReadRemoteUsedFeatures = 0x2016,

end_thing () = {}

